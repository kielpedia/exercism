(def db {1 ["a" "b" ] 2 ["x"]}
)
db
(sort-by db key)
(sort-by key db)
(sort-by val db)
(update-in db [val] sort-by)
(update-in db [val >] sort-by)
(def list ["2" "1"])
list
(sort-by val list)
(sort-by list)
(sort list)
(update-in db [val] sort)
dv
db
(def db {1 ["c" "b" ] 2 ["x"]}
)
db
(update-in db [val] sort)
(map sort db)
(doseq db)
(seq db)
(update-in db [val] sort)
(update-in db [> val] sort)
(update-in db [< val] sort)
(update-in db [val] sort)
(update-in db sort)
(update db [val] sort)
(update db  sort)
(update db [v] sort)
(update db v sort)
(into {} (for [[k v] db] [k sort v])
)
(into {} (for [[k v] db] [k sort v]))
(into {} (for [[k v] db] [k (sort v)]))
exit
(def db {1 ["c" "b" ] 2 ["x"]}
)
(into {} (for [[k v] db] [k (sort v)]))
exit
(def db {1 ["c" "b" ] 2 ["x"]})
(into {} (for [[k v] db] [k (sort v)]))
(sorted-map (into {} (for [[k v] db] [k (sort v)])))
(sorted-map k (into {} (for [[k v] db] [k (sort v)])))
(into {} #(for [[k v] db] [k (sort v)]))
(into #{} (for [[k v] db] [k (sort v)]))
(into {} (for [[k v] db] [k (sort v)]))
db
(sort ["c" "b"])
(sequence (sort ["c" "b"]))
[]
()
(into [](sort ["c" "b"]))
exit
(def db {1 ["c" "b" ] 2 ["x"]})
(into {} (for [[k v] db] [k (sort v)]))
(into {} (for [[k v] db] [k (into [](sort v))]))
(sort-by key (into {} (for [[k v] db] [k (into [](sort v))])))
(def db {1 ["c" "b" ] 2 ["x"]})
(for [[k v ] db] (assoc db k (sort v)))
db
(into {} (for [[k v] db] [k (sort v) ]))
(def db {1 ["c" "b" ] 2 ["x"]})
(into {} (for [[k v] db] [k (into [] (sort v)) ]))
(def db2 (into {} (for [[k v] db] [k (into [] (sort v)) ])))
db2
(sort-by key db2)
(sort- key db2)
(sort key db2)
(sort db2)
(sorted-map db2)
(into (sorted-map) db2)
lein test
exit
